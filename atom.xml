<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MalBox</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0xomochi.github.io/"/>
  <updated>2019-11-01T16:00:46.509Z</updated>
  <id>http://0xomochi.github.io/</id>
  
  <author>
    <name>0xomochi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TLPを守ろう</title>
    <link href="http://0xomochi.github.io/2019/07/10/tlp/"/>
    <id>http://0xomochi.github.io/2019/07/10/tlp/</id>
    <published>2019-07-09T18:21:02.000Z</published>
    <updated>2019-11-01T16:00:46.509Z</updated>
    
    <content type="html"><![CDATA[<p>人々はTLPという考え方の元に情報共有をするべきだと思うので簡単にまとめておく．<br>TLP遵守は，セキュリティのフィールドにいるなら尚のこと大切．  </p><h2 id="TLPとは？"><a href="#TLPとは？" class="headerlink" title="TLPとは？"></a>TLPとは？</h2><p>機密情報が適切な公開先に共有されるように情報共有の範囲を指定する規格のことをTLP(=Traffic Light Protocol)という．</p><p>※TLPを指定するのは情報を持っている本人or組織orコミュニティであり，第三者ではない．</p><p>TLPは4段階で表されていおり，簡単に言うと次のような範囲が指定されている．</p><ul><li>TLP:RED: 公開禁止，関係者限り</li><li>TLP:AMBER: 公開制限．関係者組織限り</li><li>TLP:GREEN: 公開制限，コミュニティ限り</li><li>TLP:WHITE: 公開制限なし</li></ul><p>ちなみにTLPには段階ごとにカラーコードが決まっている．<br><img src="https://github.com/0xomochi/images/blob/master/tlpcolorcode.png?raw=true" width="100"></p><p>(now editing…)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人々はTLPという考え方の元に情報共有をするべきだと思うので簡単にまとめておく．&lt;br&gt;TLP遵守は，セキュリティのフィールドにいるなら尚のこと大切．  &lt;/p&gt;
&lt;h2 id=&quot;TLPとは？&quot;&gt;&lt;a href=&quot;#TLPとは？&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="tlp" scheme="http://0xomochi.github.io/categories/tlp/"/>
    
      <category term="security" scheme="http://0xomochi.github.io/categories/tlp/security/"/>
    
    
      <category term="tlp" scheme="http://0xomochi.github.io/tags/tlp/"/>
    
  </entry>
  
  <entry>
    <title>論文の読み方を見直したら割とうまくいった話</title>
    <link href="http://0xomochi.github.io/2019/05/11/howto-read-paper/"/>
    <id>http://0xomochi.github.io/2019/05/11/howto-read-paper/</id>
    <published>2019-05-11T02:58:21.000Z</published>
    <updated>2019-05-11T03:17:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>論文を最低でも一日一本読むことを目標としていたのだが、三日坊主になりがちで続かないので、以前から気になっていた、論文の効率の良い読み進め方、継続方法を実践してみた。</p><p>素早く疲れることなく論文が読み進められること、後から見返してどのような論文であったかを思い出せること、を目指した。<br>後から見返してどのような論文であったかが一目で分かれば研究で振り返りたい際に役立つだけでなく、他の研究メンバーに論文を紹介するときにも役立つだろう。<br><br></p><p>実践したのは落合陽一氏の「先端技術とメディア表現1 #FTMA15」p65の図にあるポイントを意識しながら論文を読むことだ。<br>以下はは実験論文を読む際のポイントとして挙げられている。<br>・どんなもの？(=どんな研究？)<br>・先行研究と比べてどこがすごい？<br>・技術や手法のキモはどこ？<br>・どうやって有効だと検証した？<br>・議論はある？<br>・次に読むべき論文は？<br>これら6点に着目して論文から問いの答えを抽出し、下のような一枚のスライドにまとめる。</p><p><img src="https://image.slidesharecdn.com/random-150503101608-conversion-gate02/95/1-ftma15-65-638.jpg?cb=1430648213"></p><p>(出典: <a href="https://www.slideshare.net/Ochyai/1-ftma15/65" target="_blank" rel="noopener">https://www.slideshare.net/Ochyai/1-ftma15/65</a>)</p><p>論文を読む順番は以下の通りにした。<br>この方法を試す前から時間がないときはアブストラクト→結論の順に読んでいたのでそこは今まで通りに。</p><ol><li>アブストラクト(研究概要)</li><li>結論(研究のまとめ)</li><li>イントロダクション(対象テーマの背景や問題点とその重要性)</li><li>関連研究(その問題に関する先行研究、それらの問題点や未解決事項)</li><li>本論(研究で提案した手法の概要と詳細)</li><li>検証・評価(提案した手法)</li></ol><p>そして最後にざっと全体を読み返しながらまとめスライドを作成する。</p><p>このスライドにまとめる作業を効率的にするためにも、アブストラクトから読んでいく際に先程示した6点を意識しながら読む必要がある。</p><p>・どんなもの(研究)？→アブストラクト<br>・先行研究と比べてどこがすごい？→関連研究と本論<br>・技術や手法のキモはどこ？→本論<br>・どうやって有効だと検証した？→検証・評価<br>・議論はある？→結論<br>・次に読むべき論文は？→参考文献(引用されている論文など)</p><p>上で紹介した方法で論文を読んでみた。<br>10ページほどの論文を各5分程度度読み切る(時間を決める)ことを目標に読み進めると効率的にでき、なおかつ達成感も得られるのでよさそうである。<br>引き続きこの方法で論文を読み貯めていこうと思う。</p><p><br></p><p>&lt;余談&gt;<br>文献をまとめておく方法としては<a href="https://readingmonkey.blog.fc2.com/blog-entry-684.html" target="_blank" rel="noopener">レビュー・マトリクス</a>というものもあるらしい。<br>集めた文献を年代別に並べ、文献から抽出するトピックを決める。<br>それらを表としてまとめることで年代別に該当トピックがどのように研究されてきたかが一目でわかるようになる。<br>スライドにまとめるだけでなく、このレビュー・マトリクスの手法に沿って表にまとめておくのもいいのかもしれない。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.slideshare.net/Ochyai/1-ftma15/1" target="_blank" rel="noopener">落合陽一 Slide Share 「先端技術とメディア表現1 #FTMA15」</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;論文を最低でも一日一本読むことを目標としていたのだが、三日坊主になりがちで続かないので、以前から気になっていた、論文の効率の良い読み進め方、継続方法を実践してみた。&lt;/p&gt;
&lt;p&gt;素早く疲れることなく論文が読み進められること、後から見返してどのような論文であったかを思い出せ
      
    
    </summary>
    
      <category term="research" scheme="http://0xomochi.github.io/categories/research/"/>
    
    
      <category term="reading papers" scheme="http://0xomochi.github.io/tags/reading-papers/"/>
    
  </entry>
  
  <entry>
    <title>ファイルレスマルウェア備忘録</title>
    <link href="http://0xomochi.github.io/2019/05/10/fileless-mal/"/>
    <id>http://0xomochi.github.io/2019/05/10/fileless-mal/</id>
    <published>2019-05-10T06:55:06.000Z</published>
    <updated>2019-05-10T06:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ファイルレスマルウェアに関する記事"><a href="#ファイルレスマルウェアに関する記事" class="headerlink" title="ファイルレスマルウェアに関する記事"></a>ファイルレスマルウェアに関する記事</h2><h4 id="McAfee"><a href="#McAfee" class="headerlink" title="McAfee"></a>McAfee</h4><ul><li><a href="https://blogs.mcafee.jp/what-is-fileless-malware#1" target="_blank" rel="noopener">ファイルレスマルウェアの脅威！仕組みと感染経路からみる実践的対策</a></li><li><a href="https://www.mcafee.com/enterprise/ja-jp/assets/white-papers/fileless-malware-report.pdf" target="_blank" rel="noopener">ファイルレス攻撃解説</a></li></ul><h4 id="FFRI"><a href="#FFRI" class="headerlink" title="FFRI"></a>FFRI</h4><ul><li><a href="https://www.hitachi-systems.com/-/media/solution/s105/yarai/download/ffri_WP.pdf" target="_blank" rel="noopener">「先読みする防御」が⾒据える次の脅威 ファイルレスマルウェアから守るセキュリティ技術</a></li></ul><h4 id="WatchGuard"><a href="#WatchGuard" class="headerlink" title="WatchGuard"></a>WatchGuard</h4><ul><li><a href="https://www.watchguard.co.jp/resource-center/2019-predictions" target="_blank" rel="noopener">自己増殖型ファイルレス「vaporworms」攻撃</a></li></ul><h2 id="ファイルレスマルウェアのレポート"><a href="#ファイルレスマルウェアのレポート" class="headerlink" title="ファイルレスマルウェアのレポート"></a>ファイルレスマルウェアのレポート</h2><h4 id="TrendMicro"><a href="#TrendMicro" class="headerlink" title="TrendMicro"></a>TrendMicro</h4><ul><li><p><a href="https://blog.trendmicro.co.jp/archives/15653" target="_blank" rel="noopener">より高度な「ファイルレス活動」を実現した一連のマルウェアを確認</a></p></li><li><p><a href="https://blog.trendmicro.co.jp/archives/15818" target="_blank" rel="noopener">更新：「JS_POWMET」の「ファイルレス活動」、感染経路が USB と特定</a></p></li></ul><h2 id="ファイルレスマルウェア対策"><a href="#ファイルレスマルウェア対策" class="headerlink" title="ファイルレスマルウェア対策"></a>ファイルレスマルウェア対策</h2><ul><li><p><a href="https://blueplanet-works.com/contents/img/pdf/Fileless_Malware_whitepapers_rev1.pdf" target="_blank" rel="noopener">10分でわかるAppGuard：ファイルレス攻撃から守る仕組み</a></p></li><li><p><a href="https://www.checkpoint.co.jp/threat-cloud/2018/09/file-less-malware-no-match-for-sandblast-agent.html" target="_blank" rel="noopener">台頭するファイルレス・マルウェアも検出可能なCheck Point SandBlast Agent 新機能「Behavioral Guard」を使い、不正なふるまいを検出</a></p></li></ul><p>(to be updated)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ファイルレスマルウェアに関する記事&quot;&gt;&lt;a href=&quot;#ファイルレスマルウェアに関する記事&quot; class=&quot;headerlink&quot; title=&quot;ファイルレスマルウェアに関する記事&quot;&gt;&lt;/a&gt;ファイルレスマルウェアに関する記事&lt;/h2&gt;&lt;h4 id=&quot;McAfe
      
    
    </summary>
    
      <category term="malware" scheme="http://0xomochi.github.io/categories/malware/"/>
    
    
      <category term="fileless malware" scheme="http://0xomochi.github.io/tags/fileless-malware/"/>
    
  </entry>
  
  <entry>
    <title>アンチウイルス備忘録</title>
    <link href="http://0xomochi.github.io/2019/05/10/anti-virus-memo/"/>
    <id>http://0xomochi.github.io/2019/05/10/anti-virus-memo/</id>
    <published>2019-05-10T06:48:32.000Z</published>
    <updated>2019-05-10T06:58:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="McAfee"><a href="#McAfee" class="headerlink" title="McAfee"></a>McAfee</h2><p><a href="https://blogs.mcafee.jp/" target="_blank" rel="noopener">McAfee公式ブログ</a><br><a href="https://www.mcafee.com/enterprise/ja-jp/products/a-z.html" target="_blank" rel="noopener">McAfee製品一覧</a></p><h3 id="McAfee-Endpoint-Security"><a href="#McAfee-Endpoint-Security" class="headerlink" title="McAfee Endpoint Security"></a>McAfee Endpoint Security</h3><p>総合的なエンドポイントセキュリティ対策ソフトには<a href="https://www.mcafee.com/enterprise/ja-jp/products/endpoint-security.html" target="_blank" rel="noopener">McAfee Endpoint Security</a>がある。<br>コンシューマ向けではないが、おそらくこの製品がMcAfee製品の中で最も網羅的に脅威に対応できるものであると思われる。<br>このような総合セキュリティ対策ソフトは従来型のウイルス対策ソフトのようにシグネチャによるマルウェア検知しかしないものとは異なり、ファイルレスマルウェアの検知も可能とされている。<br>プラットフォームはWindowsOS, Windows Serverに対応しており、その他OSには対応していない。</p><blockquote><p>&lt;補足&gt;<br>EDR(Endpoint Detection and Response)製品はエンドポイントで脅威の「検知」を行い「対応」をサポートする製品で、監視・情報収集、機械学習・動作分析により、エンドポイントに侵入してきた未知のマルウェアの検知・対応策として有効です。<br>例えば、PowerShellの接続と同時にWordが起動したとしたら疑わしいため、そのプロセスを隔離・停止するなど怪しい行動を阻止するような措置をとるなど対策が進んでいます。</p><p>引用: <a href="https://blogs.mcafee.jp/what-is-fileless-malware#1" target="_blank" rel="noopener">ファイルレスマルウェアの脅威！仕組みと感染経路からみる実践的対策</a></p></blockquote><h4 id="McAfee-Endpoint-Securityの機能"><a href="#McAfee-Endpoint-Securityの機能" class="headerlink" title="McAfee Endpoint Securityの機能"></a>McAfee Endpoint Securityの機能</h4><ol><li>コアの脅威対策<br>マルウェア対策、エクスプロイト防止、ファイヤウォールなどの基本的なセキュリティ機能。</li><li>機械学習<br>静的な動作属性に基づいて不正なコードを識別する。</li><li>アプリケーションの隔離<br>動作をブロックすることで不審なファイルやゼロデイマルウェアの影響を限定する。</li><li><a href="https://www.mcafee.com/enterprise/ja-jp/assets/data-sheets/ds-active-response.pdf" target="_blank" rel="noopener">Endpoint Detection and Response(EDR)</a><br>統合・自動化された適応型のEDR技術でワンクリックでインシデント対応が可能。</li></ol><h2 id="Symantec"><a href="#Symantec" class="headerlink" title="Symantec"></a>Symantec</h2><p><a href="https://www.symantec.com/ja/jp/security-center/threats" target="_blank" rel="noopener">脅威情報</a><br><a href="https://www.symantec.com/ja/jp/products#products-az" target="_blank" rel="noopener">Symantec 製品一覧</a></p><p>(to be updated)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;McAfee&quot;&gt;&lt;a href=&quot;#McAfee&quot; class=&quot;headerlink&quot; title=&quot;McAfee&quot;&gt;&lt;/a&gt;McAfee&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.mcafee.jp/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="anti-virus" scheme="http://0xomochi.github.io/categories/anti-virus/"/>
    
    
      <category term="anti-virus" scheme="http://0xomochi.github.io/tags/anti-virus/"/>
    
  </entry>
  
  <entry>
    <title>Windows機でlive USBを作ったはなし</title>
    <link href="http://0xomochi.github.io/2019/03/19/liveusb/"/>
    <id>http://0xomochi.github.io/2019/03/19/liveusb/</id>
    <published>2019-03-19T10:31:40.000Z</published>
    <updated>2019-03-20T05:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="live-USBとは"><a href="#live-USBとは" class="headerlink" title="live USBとは"></a>live USBとは</h2><p>今回作ったlive USBはWindows機の元から入ってるライセンスを保持しつつ、同じPCを使ってUSBからUbuntuを起動するということができるもの。<br>使っているWindows機のOSを潰さずにUbuntuをさくさく使えるようにしたかったため、VirtualBoxなどの仮想環境構築ツールではなくlive USBを選択した。  </p><h2 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h2><ul><li>Ubuntuのisoイメージ<ul><li>公式から最新版をダウンロードしてくれば良い(無料)</li></ul></li><li>Ubuntuのisoイメージを入れるためのUSB<ul><li>2GBあれば足りる</li><li>live USBができたら用無しなのでフォーマットして再度使える</li></ul></li><li>Universal USB Installer<ul><li>これもfreeでダウンロードしてくれば良い</li></ul></li><li>Ubuntuを実際に起動するためのUSB<ul><li>最低でも16GB</li><li>ファイルなどを保存しておきたいなら64GB</li><li>今回は1TBSSDを使った(すいすい動くのでおすすめ)</li></ul></li></ul><h2 id="Ubuntu-Desktopのダウンロード"><a href="#Ubuntu-Desktopのダウンロード" class="headerlink" title="Ubuntu Desktopのダウンロード"></a>Ubuntu Desktopのダウンロード</h2><p>以下のリンクから最新バージョンの<code>Ubuntu 18.04.2 LTS</code>をダウンロードしてくる。<br><code>Download</code>をクリックすれば.isoイメージが降ってくる。<br>ダウンロードが完了したら、<strong><em>Ubuntuの.isoイメージを入れるためのUSB(容量小)</em></strong> に移動しておく。  </p><ul><li><a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu Desktop Download Link</a></li></ul><h2 id="Universal-USB-Installerのダウンロード"><a href="#Universal-USB-Installerのダウンロード" class="headerlink" title="Universal USB Installerのダウンロード"></a>Universal USB Installerのダウンロード</h2><p><code>Universal USB Installer</code>は、USBなどのドライブにLinuxインストーラを作成できるアプリケーション。  </p><ul><li><a href="https://universal-usb-installer.jp.uptodown.com/windows" target="_blank" rel="noopener">Universal USB Installer Download Link</a></li></ul><blockquote><p><strong><em>Ubuntuの.isoイメージを入れるためのUSB(容量小)</em></strong> が刺さっている状態</p></blockquote><p>以下のようなUIになっていて、</p><ul><li>Step1: <code>Ubuntu</code>を選択</li><li>Step2: <code>Browse</code>から<code>ubuntu-18.04.2-desktop-amd64.iso</code>を選択</li><li>Step3: <strong><em>Ubuntuを実際に起動するためのUSB</em></strong> を選択</li></ul><p><img src="https://img.utdstc.com/screen/1/universal-usb-installer-001.jpg:s" title="setup"></p><p><code>Create</code>を押して以下のような画面になれば完了。</p><p><img src="https://img.utdstc.com/screen/1/universal-usb-installer-002.jpg:s" title="finish installation"></p><blockquote><p><strong><em>Ubuntuを実際に起動するためのUSB</em></strong> を刺しておく。</p></blockquote><p>(to be updated)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;live-USBとは&quot;&gt;&lt;a href=&quot;#live-USBとは&quot; class=&quot;headerlink&quot; title=&quot;live USBとは&quot;&gt;&lt;/a&gt;live USBとは&lt;/h2&gt;&lt;p&gt;今回作ったlive USBはWindows機の元から入ってるライセンスを保持
      
    
    </summary>
    
      <category term="tool" scheme="http://0xomochi.github.io/categories/tool/"/>
    
      <category term="live USB" scheme="http://0xomochi.github.io/categories/tool/live-USB/"/>
    
    
      <category term="live USB" scheme="http://0xomochi.github.io/tags/live-USB/"/>
    
      <category term="USB boot" scheme="http://0xomochi.github.io/tags/USB-boot/"/>
    
      <category term="Ubuntu" scheme="http://0xomochi.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>脆弱性VENOMについて</title>
    <link href="http://0xomochi.github.io/2019/02/27/VENOM%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"/>
    <id>http://0xomochi.github.io/2019/02/27/VENOMについて/</id>
    <published>2019-02-27T09:47:44.000Z</published>
    <updated>2019-03-23T05:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>VENOM = Virtualized Environment Neglected Operations Manipulation</em></strong></p><p>VENOMとは、KVM/QEMU及びXenハイパーバイザーのQEMUコンポーネントに実装されるフロッピーディスクコントローラー(FDC)エミュレーションに影響を与えるバッファオーバーフローの脆弱性のことで、<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2015-3456" target="_blank" rel="noopener">CVE-2015-3456</a>が割り振られている。  </p><p>この脆弱性を悪用することで、ゲストをクラッシュさせる、ゲストに対応するホストのQEMUプロセスの権限を用いてホストで任意のコードを実行することが可能となる。<br>ホストのQEMUのプロセスの特権やリソースアクセスを制限するために使用される<a href="http://enakai00.hatenablog.com/entry/20101221/1292917366" target="_blank" rel="noopener">sVirt</a>および<a href="http://mmi.hatenablog.com/entry/2016/08/01/044000" target="_blank" rel="noopener">seccomp機能</a>(Secure Computingの略らしい)により、VENOMの悪用による影響が軽減される可能性がある。  </p><p>回避策としては、信頼されていないユーザにゲスト内の管理者特権を付与しないようにすることが挙げられる。  </p><p>[用語]<br>・<strong><em>sVirt</em></strong> = 仮想マシンのプロセスからホスト上の不要なリソースへのアクセスを禁止するためにKVMの仮想マシンプロセスに設定されるもの(svirt_tタイプが設定される)。これによってホストマシンと仮想マシンの分離が可能となっている。これに加えてlibvirtによってKVMに関連するプロセスやファイルにMCSのカテゴリラベルを付与することによって、ホストマシンと仮想マシン間だけでなく、仮想マシン間の分離も可能となる。<br>・<strong><em>seccomp</em></strong> = Secure Computingの略。Linux上で仮想環境を実現するためにプロセスのシステムコール発行を制限する機能。  </p><h2 id="VM-escape"><a href="#VM-escape" class="headerlink" title="VM escape"></a>VM escape</h2><p>以下の2種類の脆弱性を悪用することでVMエスケープが成功してしまう。<br>・<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5165" target="_blank" rel="noopener">CVE-2015-5165</a><br>・<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7504" target="_blank" rel="noopener">CVE-2015-7504</a><br><code>CVE-2015-5165</code>は<code>memory leak脆弱性</code>、<code>CVE-2015-7504</code>は<code>heap-based overflow脆弱性</code>である。  </p><h2 id="CVE情報について"><a href="#CVE情報について" class="headerlink" title="CVE情報について"></a>CVE情報について</h2><p><strong><em>CVE = Common Vulnerabilities and Exposures</em></strong><br>CVE情報は以下のサイトを参考にすると良い。  </p><ul><li><a href="http://cve.mitre.org/" target="_blank" rel="noopener">CVE識別番号管理サイト</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>・<a href="https://venom.crowdstrike.com/" target="_blank" rel="noopener">https://venom.crowdstrike.com/</a><br>・<a href="https://threatpost.com/venom-flaw-in-virtualization-software-could-lead-to-vm-escapes-data-theft/112772/" target="_blank" rel="noopener">https://threatpost.com/venom-flaw-in-virtualization-software-could-lead-to-vm-escapes-data-theft/112772/</a><br>・<a href="https://access.redhat.com/ja/articles/1446873" target="_blank" rel="noopener">https://access.redhat.com/ja/articles/1446873</a>  </p><p>(to be updated)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;VENOM = Virtualized Environment Neglected Operations Manipulation&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;VENOMとは、KVM/QEMU及びXenハイパーバイザーのQEMUコンポー
      
    
    </summary>
    
      <category term="Vulnerabilities" scheme="http://0xomochi.github.io/categories/Vulnerabilities/"/>
    
      <category term="VENOM" scheme="http://0xomochi.github.io/categories/Vulnerabilities/VENOM/"/>
    
    
      <category term="VENOM" scheme="http://0xomochi.github.io/tags/VENOM/"/>
    
      <category term="VM escape" scheme="http://0xomochi.github.io/tags/VM-escape/"/>
    
  </entry>
  
  <entry>
    <title>Volatility Framework 使い始め</title>
    <link href="http://0xomochi.github.io/2019/02/13/volatility-framework/"/>
    <id>http://0xomochi.github.io/2019/02/13/volatility-framework/</id>
    <published>2019-02-13T06:02:57.000Z</published>
    <updated>2019-02-18T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Volatility-Frameworkとは"><a href="#Volatility-Frameworkとは" class="headerlink" title="Volatility Frameworkとは"></a>Volatility Frameworkとは</h3><p>無料配布オープンソースのメモリフォレンジックツール。pythonが使える環境であればUnix, Windows, MacOSで動作する。ローダンプ、クラッシュダンプ、ハイバーネーションファイルなどのファイルフォーマットに対応している。</p><blockquote><p>The Volatility Framework is a completely open collection of tools,<br>implemented in Python under the GNU General Public License, for the<br>extraction of digital artifacts from volatile memory (RAM) samples.<br>The extraction techniques are performed completely independent of the<br>system being investigated but offer visibilty into the runtime state<br>of the system. The framework is intended to introduce people to the<br>techniques and complexities associated with extracting digital artifacts<br>from volatile memory samples and provide a platform for further work into<br>this exciting area of research.<br>引用: <a href="https://github.com/volatilityfoundation/volatility" target="_blank" rel="noopener">https://github.com/volatilityfoundation/volatility</a></p></blockquote><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>・<a href="https://www.volatilityfoundation.org/" target="_blank" rel="noopener">Volatility Foundation</a><br>・<a href="https://github.com/volatilityfoundation/volatility" target="_blank" rel="noopener">GitHub volatilityfoundation/volatility</a></p><h3 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install volatility</span><br></pre></td></tr></table></figure><h3 id="エラー"><a href="#エラー" class="headerlink" title="エラー"></a>エラー</h3><p>以下のエラーが出たら<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dyld: Library not loaded: /usr/<span class="built_in">local</span>/opt/readline/lib/libreadline.7.dylib</span><br><span class="line">  Referenced from: /usr/<span class="built_in">local</span>/bin/awk</span><br></pre></td></tr></table></figure></p><p>次のように実行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew uninstall gawk</span><br><span class="line"></span><br><span class="line">$ brew uninstall readline</span><br><span class="line"><span class="comment"># もし上のreadlineの方のコマンドが弾かれた場合は以下を実行</span></span><br><span class="line">$ brew uninstall --ignore-dependencies readline</span><br><span class="line">$ brew uninstall --force readline</span><br></pre></td></tr></table></figure></p><p>次に以下を実行しようとするとPATHについて怒られるとも思うので<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install readline</span><br></pre></td></tr></table></figure></p><p>以下のPATHを<code>~/.bashrc</code>に追加する<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/openssl/lib"</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/openssl/include"</span></span><br></pre></td></tr></table></figure></p><p><code>~/.bashrc</code>をリロード<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure></p><p>PATHの追加後、以下のコマンドを実行する<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install readline</span><br><span class="line">$ brew install gawk</span><br></pre></td></tr></table></figure></p><h3 id="コマンド一覧"><a href="#コマンド一覧" class="headerlink" title="コマンド一覧"></a>コマンド一覧</h3><p><code>$ vol.py -h</code>を実行してヘルプを見る</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Usage: Volatility - A memory forensics analysis platform.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            list all available options and their default values.</span><br><span class="line">                        Default values may be <span class="built_in">set</span> <span class="keyword">in</span> the configuration file</span><br><span class="line">                        (/etc/volatilityrc)</span><br><span class="line">  --conf-file=/Users/omochi/.volatilityrc</span><br><span class="line">                        User based configuration file</span><br><span class="line">  -d, --debug           Debug volatility</span><br><span class="line">  --plugins=PLUGINS     Additional plugin directories to use (colon separated)</span><br><span class="line">  --info                Print information about all registered objects</span><br><span class="line">  --cache-directory=/Users/omochi/.cache/volatility</span><br><span class="line">                        Directory <span class="built_in">where</span> cache files are stored</span><br><span class="line">  --cache               Use caching</span><br><span class="line">  --tz=TZ               Sets the (Olson) timezone <span class="keyword">for</span> displaying timestamps</span><br><span class="line">                        using pytz (<span class="keyword">if</span> installed) or tzset</span><br><span class="line">  -f FILENAME, --filename=FILENAME</span><br><span class="line">                        Filename to use when opening an image</span><br><span class="line">  --profile=WinXPSP2x86</span><br><span class="line">                        Name of the profile to load (use --info to see a list</span><br><span class="line">                        of supported profiles)</span><br><span class="line">  -l LOCATION, --location=LOCATION</span><br><span class="line">                        A URN location from <span class="built_in">which</span> to load an address space</span><br><span class="line">  -w, --write           Enable write support</span><br><span class="line">  --dtb=DTB             DTB Address</span><br><span class="line">  --<span class="built_in">shift</span>=SHIFT         Mac KASLR <span class="built_in">shift</span> address</span><br><span class="line">  --output=text         Output <span class="keyword">in</span> this format (support is module specific, see</span><br><span class="line">                        the Module Output Options below)</span><br><span class="line">  --output-file=OUTPUT_FILE</span><br><span class="line">                        Write output <span class="keyword">in</span> this file</span><br><span class="line">  -v, --verbose         Verbose information</span><br><span class="line">  -g KDBG, --kdbg=KDBG  Specify a KDBG virtual address (Note: <span class="keyword">for</span> 64-bit</span><br><span class="line">                        Windows 8 and above this is the address of</span><br><span class="line">                        KdCopyDataBlock)</span><br><span class="line">  --force               Force utilization of suspect profile</span><br><span class="line">  --cookie=COOKIE       Specify the address of nt!ObHeaderCookie (valid <span class="keyword">for</span></span><br><span class="line">                        Windows 10 only)</span><br><span class="line">  -k KPCR, --kpcr=KPCR  Specify a specific KPCR address</span><br><span class="line"></span><br><span class="line">Supported Plugin Commands:</span><br><span class="line"></span><br><span class="line">amcache        Print AmCache information</span><br><span class="line">apihooks       Detect API hooks <span class="keyword">in</span> process and kernel memory</span><br><span class="line">atoms          Print session and window station atom tables</span><br><span class="line">atomscan       Pool scanner <span class="keyword">for</span> atom tables</span><br><span class="line">auditpol       Prints out the Audit Policies from HKLM\SECURITY\Policy\PolAdtEv</span><br><span class="line">bigpools       Dump the big page pools using BigPagePoolScanner</span><br><span class="line">bioskbd        Reads the keyboard buffer from Real Mode memory</span><br><span class="line">cachedump      Dumps cached domain hashes from memory</span><br><span class="line">callbacks      Print system-wide notification routines</span><br><span class="line">clipboard      Extract the contents of the windows clipboard</span><br><span class="line">cmdline        Display process <span class="built_in">command</span>-line arguments</span><br><span class="line">cmdscan        Extract <span class="built_in">command</span> <span class="built_in">history</span> by scanning <span class="keyword">for</span> _COMMAND_HISTORY</span><br><span class="line">connections    Print list of open connections [Windows XP and 2003 Only]</span><br><span class="line">connscan       Pool scanner <span class="keyword">for</span> tcp connections</span><br><span class="line">consoles       Extract <span class="built_in">command</span> <span class="built_in">history</span> by scanning <span class="keyword">for</span> _CONSOLE_INFORMATION</span><br><span class="line">crashinfo      Dump crash-dump information</span><br><span class="line">deskscan       Poolscaner <span class="keyword">for</span> tagDESKTOP (desktops)</span><br><span class="line">devicetree     Show device tree</span><br><span class="line">dlldump        Dump DLLs from a process address space</span><br><span class="line">dlllist        Print list of loaded dlls <span class="keyword">for</span> each process</span><br><span class="line">driverirp      Driver IRP hook detection</span><br><span class="line">drivermodule   Associate driver objects to kernel modules</span><br><span class="line">driverscan     Pool scanner <span class="keyword">for</span> driver objects</span><br><span class="line">dumpcerts      Dump RSA private and public SSL keys</span><br><span class="line">dumpfiles      Extract memory mapped and cached files</span><br><span class="line">dumpregistry   Dumps registry files out to disk</span><br><span class="line">editbox        Displays information about Edit controls. (Listbox experimental.)</span><br><span class="line">envars         Display process environment variables</span><br><span class="line">eventhooks     Print details on windows event hooks</span><br><span class="line">evtlogs        Extract Windows Event Logs (XP/2003 only)</span><br><span class="line">filescan       Pool scanner <span class="keyword">for</span> file objects</span><br><span class="line">gahti          Dump the USER handle <span class="built_in">type</span> information</span><br><span class="line">gditimers      Print installed GDI timers and callbacks</span><br><span class="line">gdt            Display Global Descriptor Table</span><br><span class="line">getservicesids Get the names of services <span class="keyword">in</span> the Registry and <span class="built_in">return</span> Calculated SID</span><br><span class="line">getsids        Print the SIDs owning each process</span><br><span class="line">handles        Print list of open handles <span class="keyword">for</span> each process</span><br><span class="line">hashdump       Dumps passwords hashes (LM/NTLM) from memory</span><br><span class="line">hibinfo        Dump hibernation file information</span><br><span class="line">hivedump       Prints out a hive</span><br><span class="line">hivelist       Print list of registry hives.</span><br><span class="line">hivescan       Pool scanner <span class="keyword">for</span> registry hives</span><br><span class="line">hpakextract    Extract physical memory from an HPAK file</span><br><span class="line">hpakinfo       Info on an HPAK file</span><br><span class="line">idt            Display Interrupt Descriptor Table</span><br><span class="line">iehistory      Reconstruct Internet Explorer cache / <span class="built_in">history</span></span><br><span class="line">imagecopy      Copies a physical address space out as a raw DD image</span><br><span class="line">imageinfo      Identify information <span class="keyword">for</span> the image</span><br><span class="line">impscan        Scan <span class="keyword">for</span> calls to imported <span class="built_in">functions</span></span><br><span class="line">joblinks       Print process job link information</span><br><span class="line">kdbgscan       Search <span class="keyword">for</span> and dump potential KDBG values</span><br><span class="line">kpcrscan       Search <span class="keyword">for</span> and dump potential KPCR values</span><br><span class="line">ldrmodules     Detect unlinked DLLs</span><br><span class="line">lsadump        Dump (decrypted) LSA secrets from the registry</span><br><span class="line">machoinfo      Dump Mach-O file format information</span><br><span class="line">malfind        Find hidden and injected code</span><br><span class="line">mbrparser      Scans <span class="keyword">for</span> and parses potential Master Boot Records (MBRs)</span><br><span class="line">memdump        Dump the addressable memory <span class="keyword">for</span> a process</span><br><span class="line">memmap         Print the memory map</span><br><span class="line">messagehooks   List desktop and thread window message hooks</span><br><span class="line">mftparser      Scans <span class="keyword">for</span> and parses potential MFT entries</span><br><span class="line">moddump        Dump a kernel driver to an executable file sample</span><br><span class="line">modscan        Pool scanner <span class="keyword">for</span> kernel modules</span><br><span class="line">modules        Print list of loaded modules</span><br><span class="line">multiscan      Scan <span class="keyword">for</span> various objects at once</span><br><span class="line">mutantscan     Pool scanner <span class="keyword">for</span> mutex objects</span><br><span class="line">notepad        List currently displayed notepad text</span><br><span class="line">objtypescan    Scan <span class="keyword">for</span> Windows object <span class="built_in">type</span> objects</span><br><span class="line">patcher        Patches memory based on page scans</span><br><span class="line">poolpeek       Configurable pool scanner plugin</span><br><span class="line">printkey       Print a registry key, and its subkeys and values</span><br><span class="line">privs          Display process privileges</span><br><span class="line">procdump       Dump a process to an executable file sample</span><br><span class="line">pslist         Print all running processes by following the EPROCESS lists</span><br><span class="line">psscan         Pool scanner <span class="keyword">for</span> process objects</span><br><span class="line">pstree         Print process list as a tree</span><br><span class="line">psxview        Find hidden processes with various process listings</span><br><span class="line">qemuinfo       Dump Qemu information</span><br><span class="line">raw2dmp        Converts a physical memory sample to a windbg crash dump</span><br><span class="line">screenshot     Save a pseudo-screenshot based on GDI windows</span><br><span class="line">servicediff    List Windows services (ala Plugx)</span><br><span class="line">sessions       List details on _MM_SESSION_SPACE (user logon sessions)</span><br><span class="line">shellbags      Prints ShellBags info</span><br><span class="line">shimcache      Parses the Application Compatibility Shim Cache registry key</span><br><span class="line">shutdowntime   Print ShutdownTime of machine from registry</span><br><span class="line">sockets        Print list of open sockets</span><br><span class="line">sockscan       Pool scanner <span class="keyword">for</span> tcp socket objects</span><br><span class="line">ssdt           Display SSDT entries</span><br><span class="line">strings        Match physical offsets to virtual addresses (may take a <span class="keyword">while</span>, VERY verbose)</span><br><span class="line">svcscan        Scan <span class="keyword">for</span> Windows services</span><br><span class="line">symlinkscan    Pool scanner <span class="keyword">for</span> symlink objects</span><br><span class="line">thrdscan       Pool scanner <span class="keyword">for</span> thread objects</span><br><span class="line">threads        Investigate _ETHREAD and _KTHREADs</span><br><span class="line">timeliner      Creates a timeline from various artifacts <span class="keyword">in</span> memory</span><br><span class="line">timers         Print kernel timers and associated module DPCs</span><br><span class="line">truecryptmasterRecover TrueCrypt 7.1a Master Keys</span><br><span class="line">truecryptpassphraseTrueCrypt Cached Passphrase Finder</span><br><span class="line">truecryptsummaryTrueCrypt Summary</span><br><span class="line">unloadedmodulesPrint list of unloaded modules</span><br><span class="line">userassist     Print userassist registry keys and information</span><br><span class="line">userhandles    Dump the USER handle tables</span><br><span class="line">vaddump        Dumps out the vad sections to a file</span><br><span class="line">vadinfo        Dump the VAD info</span><br><span class="line">vadtree        Walk the VAD tree and display <span class="keyword">in</span> tree format</span><br><span class="line">vadwalk        Walk the VAD tree</span><br><span class="line">vboxinfo       Dump virtualbox information</span><br><span class="line">verinfo        Prints out the version information from PE images</span><br><span class="line">vmwareinfo     Dump VMware VMSS/VMSN information</span><br><span class="line">volshell       Shell <span class="keyword">in</span> the memory image</span><br><span class="line">windows        Print Desktop Windows (verbose details)</span><br><span class="line">wintree        Print Z-Order Desktop Windows Tree</span><br><span class="line">wndscan        Pool scanner <span class="keyword">for</span> window stations</span><br><span class="line">yarascan       Scan process or kernel memory with Yara signatures</span><br></pre></td></tr></table></figure><p>(to be updated)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Volatility-Frameworkとは&quot;&gt;&lt;a href=&quot;#Volatility-Frameworkとは&quot; class=&quot;headerlink&quot; title=&quot;Volatility Frameworkとは&quot;&gt;&lt;/a&gt;Volatility Framework
      
    
    </summary>
    
      <category term="tool" scheme="http://0xomochi.github.io/categories/tool/"/>
    
      <category term="Volatility Framework" scheme="http://0xomochi.github.io/categories/tool/Volatility-Framework/"/>
    
    
      <category term="Volatility Framework" scheme="http://0xomochi.github.io/tags/Volatility-Framework/"/>
    
      <category term="memory forensic" scheme="http://0xomochi.github.io/tags/memory-forensic/"/>
    
  </entry>
  
  <entry>
    <title>PyREBoxについて</title>
    <link href="http://0xomochi.github.io/2019/02/12/PyREBox/"/>
    <id>http://0xomochi.github.io/2019/02/12/PyREBox/</id>
    <published>2019-02-12T06:22:57.000Z</published>
    <updated>2019-02-12T06:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PyREBox"><a href="#PyREBox" class="headerlink" title="PyREBox"></a>PyREBox</h1><h3 id="PyREBox-Python-Reverse-Engineering-Sandbox"><a href="#PyREBox-Python-Reverse-Engineering-Sandbox" class="headerlink" title="PyREBox(=Python Reverse Engineering Sandbox)"></a><a href="https://github.com/Cisco-Talos/pyrebox" target="_blank" rel="noopener">PyREBox</a>(=Python Reverse Engineering Sandbox)</h3><p>Cisco-TalosがリリースしたPythonスクリプトで操作できるQEMUベースのリバースエンジニアリング用サンドボックス(オープンソース)</p><h3 id="PyREBox概要"><a href="#PyREBox概要" class="headerlink" title="PyREBox概要"></a>PyREBox概要</h3><blockquote><p>PyREBox is a Python scriptable Reverse Engineering sandbox. It is based on QEMU, and its goal is to aid reverse engineering by providing dynamic analysis and debugging capabilities from a different perspective. PyREBox allows to inspect a running QEMU VM, modify its memory or registers, and to instrument its execution, by creating simple scripts in python to automate any kind of analysis. QEMU (when working as a whole-system-emulator) emulates a complete system (CPU, memory, devices…). By using VMI techniques, it does not require to perform any modification into the guest operating system, as it transparently retrieves information from its memory at run-time.</p><p>Several academic projects such as DECAF, PANDA, S2E, or AVATAR, have previously leveraged QEMU based instrumentation to overcome reverse engineering tasks. These projects allow to write plugins in C/C++, and implement several advanced features such as dynamic taint analysis, symbolic execution, or even record and replay of execution traces. With PyREBox, we aim to apply this technology focusing on keeping the design simple, and on the usability of the system for threat analysts.</p><p>PyREBox won the Volatility Plugin Contest in 2017!</p></blockquote><p>PyREBoxはVolatility Frameworkのプラグインコンテストで優勝している。<br>Volatility Frameworkは無料配布されているメモリフォレンジックツールである。<br>詳しくは<a href="https://www.volatilityfoundation.org/" target="_blank" rel="noopener">Volatility Foundation</a>を参照。</p><blockquote><blockquote><p><a href="https://volatility-labs.blogspot.com/2017/11/results-from-5th-annual-2017-volatility.html" target="_blank" rel="noopener">Results from the (5th Annual) 2017 Volatility Plugin Contest are in!</a><br>1st: Xabier Ugarte-Pedrero (Cisco Talos): PyREBox<br>PyREBox provides an extensible reverse engineering sandbox that combines debugging capabilities with introspection. The analyst can interact with the whole system emulator, QEMU, guest either manually, using IPython, or by creating Python scripts. Unlike previous reverse engineering platforms, PyREBox, is explicitly designed for modern threat analysts and the tasks they commonly perform. PyREBox also leverages Volatility to help bridge the semantic gap challenges typically associated with virtual machine introspection.</p></blockquote><p>This tool was presented at HITB Amsterdam 2018. You can see the slides, or watch the presentation. It was also presented at the third edition of EuskalHack Security Congress (slides available).</p></blockquote><p><br></p><p>PyREBoxの詳細なフレームワークと機能については以下を参照。<br>参考1:<a href="https://blog.talosintelligence.com/2017/07/pyrebox.html" target="_blank" rel="noopener">PyREBox, a Python Scriptable Reverse Engineering Sandbox (MONDAY, JULY 17, 2017)</a><br>参考2:<a href="https://talosintelligence.com/pyrebox" target="_blank" rel="noopener">talosintelligence.com/prebox </a></p><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h3 id="Malware-Monitor"><a href="#Malware-Monitor" class="headerlink" title="Malware Monitor"></a>Malware Monitor</h3><p>Pythonで書かれたPyREBox用のスクリプト。<br>マルウェア解析に有用な情報を自動的に収集することでマルウェア解析の初期段階において解析者を助ける。<br>主な機能はAPIトレース、ダンプ、実行コードのパスの可視化、メモリモニタ。</p><blockquote><p><code>The api tracer module</code> allows to trace Windows API function calls, and to automatically extract the input and output parameters. An IDA Python script allows to import and visualize this information in IDA.</p><p><code>The dumper module</code> allows to dump the memory of a process during its execution. This module is configurable by the user, who can choose the best moment to trigger the memory dump.</p><p><code>The coverage module</code> collects an execution trace that can be used to colorize basic blocks in IDA. This features provides the user information about which code paths get executed, and which do not.</p><p>Finally, <code>the memory monitor module</code> (refered to as interproc in the scripts), monitors different memory-related operations and events, and also allows to monitor process interaction events, like new processes created, memory injection to existing processes, and so on. This last module is orthogonal to the other three. Since it monitors process creation and opening, it allows to monitor not only the initial process, but all those related to it. For example, if api tracer is turned on, and the memory monitor detects that the first process creates a second process, api tracer will start monitoring this new process and will generate an API call trace for it as well.</p></blockquote><p>GitHub: <a href="https://github.com/Cisco-Talos/pyrebox/tree/master/mw_monitor" target="_blank" rel="noopener">Malware Monitor (pyrebox/mw_monitor/)</a></p><h3 id="関連"><a href="#関連" class="headerlink" title="関連"></a>関連</h3><ul><li><a href="https://gblogs.cisco.com/jp/2018/04/talos-malware-monitor-pyrebox-for-analysis/" target="_blank" rel="noopener">Malware monitor：PyREBox を活用したマルウェア分析(Talos JAPAN 2018/04/24)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PyREBox&quot;&gt;&lt;a href=&quot;#PyREBox&quot; class=&quot;headerlink&quot; title=&quot;PyREBox&quot;&gt;&lt;/a&gt;PyREBox&lt;/h1&gt;&lt;h3 id=&quot;PyREBox-Python-Reverse-Engineering-Sandbox&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="tool" scheme="http://0xomochi.github.io/categories/tool/"/>
    
      <category term="PyREBox" scheme="http://0xomochi.github.io/categories/tool/PyREBox/"/>
    
    
      <category term="PyREBox" scheme="http://0xomochi.github.io/tags/PyREBox/"/>
    
      <category term="malware analysis" scheme="http://0xomochi.github.io/tags/malware-analysis/"/>
    
  </entry>
  
  <entry>
    <title>ランタイムパッカーについて</title>
    <link href="http://0xomochi.github.io/2019/01/29/About-Packers/"/>
    <id>http://0xomochi.github.io/2019/01/29/About-Packers/</id>
    <published>2019-01-29T03:46:39.000Z</published>
    <updated>2019-02-13T06:11:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Packer"><a href="#Packer" class="headerlink" title="Packer"></a>Packer</h1><p>ACProtect<br>Alternate EXE<br>Armadillo<br>FSG<br>MEW<br>Neolite<br>Obsidium<br>PELock<br>RLPack<br>Themida<br>UPX<br>VMProtect<br>Yoda’s Protector  </p><p>これら10種のパッカーについて以下で解説する。</p><h1 id="What’s-Packers"><a href="#What’s-Packers" class="headerlink" title="What’s Packers?"></a>What’s Packers?</h1><p>ランタイムパッカーにはCompressor, Obfuscator, Cryptor, Protector, Bundlerの5種類がある。</p><ul><li>Compressor</li><li>Obfuscator</li><li>Cryptor</li><li>Protector</li><li>Bundler</li></ul><p>(to be updated)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Packer&quot;&gt;&lt;a href=&quot;#Packer&quot; class=&quot;headerlink&quot; title=&quot;Packer&quot;&gt;&lt;/a&gt;Packer&lt;/h1&gt;&lt;p&gt;ACProtect&lt;br&gt;Alternate EXE&lt;br&gt;Armadillo&lt;br&gt;FSG&lt;br&gt;MEW&lt;
      
    
    </summary>
    
      <category term="runtime packer" scheme="http://0xomochi.github.io/categories/runtime-packer/"/>
    
    
      <category term="runtime packer" scheme="http://0xomochi.github.io/tags/runtime-packer/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell~入門~</title>
    <link href="http://0xomochi.github.io/2018/09/10/PowerShell%E5%85%A5%E9%96%80/"/>
    <id>http://0xomochi.github.io/2018/09/10/PowerShell入門/</id>
    <published>2018-09-10T06:12:56.000Z</published>
    <updated>2019-02-20T10:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PowerShellのインストール-for-mac"><a href="#PowerShellのインストール-for-mac" class="headerlink" title="PowerShellのインストール(for mac)"></a>PowerShellのインストール(for mac)</h2><p>Windows, Linuxその他へのインストールについては他を参照されたし。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Homebrew-Caskのインストール</span></span><br><span class="line">$ brew tap caskroom/cask</span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew-CaskからPowerShellをインストール</span></span><br><span class="line">$ brew cask install powershell</span><br><span class="line"></span><br><span class="line"><span class="comment"># PowerShellのバージョン確認</span></span><br><span class="line">$ pwsh -V</span><br><span class="line">PowerShell v6.0.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># PowerShellのアプデートの時は</span></span><br><span class="line">$ brew update</span><br><span class="line">$ brew cask upgrade powershell</span><br></pre></td></tr></table></figure></p><h2 id="PowerShellの起動"><a href="#PowerShellの起動" class="headerlink" title="PowerShellの起動"></a>PowerShellの起動</h2><p>terminalでこれを打ち込むだけ。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ pwsh</span><br><span class="line">PowerShell v6.0.4</span><br><span class="line">Copyright (c) Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">https://aka.ms/pscore6-docs</span><br><span class="line">Type <span class="string">'help'</span> to get <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">PS &gt;</span><br></pre></td></tr></table></figure></p><h2 id="PowerShellを触ってみる"><a href="#PowerShellを触ってみる" class="headerlink" title="PowerShellを触ってみる"></a>PowerShellを触ってみる</h2><p>PowerShellは大文字小文字を区別しないので、<code>$PSV</code> + tab でも<code>$psv</code> + tab でも<code>$PSVersionTable</code>と補完される。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; <span class="variable">$PSVersionTable</span></span><br><span class="line"></span><br><span class="line">Name                           Value</span><br><span class="line">----                           -----</span><br><span class="line">PSVersion                      <span class="number">6.0</span>.<span class="number">4</span></span><br><span class="line">PSEdition                      Core</span><br><span class="line">GitCommitId                    v6.<span class="number">0.4</span></span><br><span class="line">OS                             Darwin <span class="number">17.7</span>.<span class="number">0</span> Darwin Kernel Version <span class="number">17.7</span>.<span class="number">0</span>: Thu Jun <span class="number">21</span> <span class="number">22</span>:<span class="number">53</span>:<span class="number">14</span> PDT...</span><br><span class="line">Platform                       Unix</span><br><span class="line">PSCompatibleVersions           &#123;<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>...&#125;</span><br><span class="line">PSRemotingProtocolVersion      <span class="number">2.3</span></span><br><span class="line">SerializationVersion           <span class="number">1.1</span>.<span class="number">0.1</span></span><br><span class="line">WSManStackVersion              <span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>出力内容を一時保存しておく。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; <span class="variable">$ver</span> = <span class="variable">$PSVersionTable</span></span><br><span class="line">PS &gt; <span class="variable">$ver</span></span><br><span class="line"></span><br><span class="line">Name                           Value</span><br><span class="line">----                           -----</span><br><span class="line">PSVersion                      <span class="number">6.0</span>.<span class="number">4</span></span><br><span class="line">PSEdition                      Core</span><br><span class="line">GitCommitId                    v6.<span class="number">0.4</span></span><br><span class="line">OS                             Darwin <span class="number">17.7</span>.<span class="number">0</span> Darwin Kernel Version <span class="number">17.7</span>.<span class="number">0</span>: Thu Jun <span class="number">21</span> <span class="number">22</span>:<span class="number">53</span>:<span class="number">14</span> PDT...</span><br><span class="line">Platform                       Unix</span><br><span class="line">PSCompatibleVersions           &#123;<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>...&#125;</span><br><span class="line">PSRemotingProtocolVersion      <span class="number">2.3</span></span><br><span class="line">SerializationVersion           <span class="number">1.1</span>.<span class="number">0.1</span></span><br><span class="line">WSManStackVersion              <span class="number">3.0</span></span><br></pre></td></tr></table></figure></p><p>PowerShellのexit方法は以下の通り。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; <span class="keyword">exit</span></span><br><span class="line"><span class="comment"># あるいはCtr+D</span></span><br></pre></td></tr></table></figure></p><h3 id="Cmdlet-コマンドレット"><a href="#Cmdlet-コマンドレット" class="headerlink" title="Cmdlet(コマンドレット)"></a>Cmdlet(コマンドレット)</h3><p>lsコマンドと同じようなもの(PowerShellではCmdletと呼んでいるだけ)。<br>Cmdletは<code>[Verb]-[Nown]</code>の形になっている。<br>例: <code>Get-Content</code>, <code>Set-Location</code><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get-ChildItemはPowerShellを開いているディレクトリにあるファイルとディレクトリの一覧を表示するCmdlet(= ls)</span></span><br><span class="line">PS &gt; <span class="built_in">Get-ChildItem</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Directory: /Users/omochi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">08</span>/<span class="number">24</span>      <span class="number">1</span>:<span class="number">08</span>                Applications</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">09</span>/<span class="number">10</span>     <span class="number">15</span>:<span class="number">11</span>                Desktop</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">09</span>/<span class="number">05</span>     <span class="number">10</span>:<span class="number">36</span>                Documents</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">09</span>/<span class="number">09</span>     <span class="number">21</span>:<span class="number">03</span>                Downloads</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">09</span>/<span class="number">09</span>     <span class="number">18</span>:<span class="number">10</span>                Library</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">08</span>/<span class="number">24</span>      <span class="number">0</span>:<span class="number">07</span>                Movies</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">08</span>/<span class="number">24</span>      <span class="number">0</span>:<span class="number">07</span>                Music</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">08</span>/<span class="number">24</span>      <span class="number">0</span>:<span class="number">07</span>                Pictures</span><br><span class="line">d-----       <span class="number">2018</span>/<span class="number">08</span>/<span class="number">24</span>      <span class="number">0</span>:<span class="number">07</span>                Public</span><br></pre></td></tr></table></figure></p><h3 id="シンタックスハイライト"><a href="#シンタックスハイライト" class="headerlink" title="シンタックスハイライト"></a>シンタックスハイライト</h3><p>PowerShellコンソール上では変数、コマンド、数字がデフォルトで色付けされていて可愛い。</p><h2 id="実際に使っていく時に便利な開発環境"><a href="#実際に使っていく時に便利な開発環境" class="headerlink" title="実際に使っていく時に便利な開発環境"></a>実際に使っていく時に便利な開発環境</h2><p><code>Visual Studio Code</code>を使って開発を行うと便利。<br>使いやすいので書いておく。</p><p>まず、以下から.zipファイルをダウンロードしてVSCodeをインストールする。<br><a href="https://code.visualstudio.com/docs/?dv=osx" target="_blank" rel="noopener">Visual Studio Code Download link</a></p><p>↓</p><p>VSCodeにPowerShellの拡張機能をインストールする。<br>Marketplaceで<code>PowerShell</code>と検索すると<code>PowerShell</code>という名前の拡張機能がヒットするのでそれをinstallする。</p><p>↓</p><p>以下のような環境でPowerShellを扱えるようになる。</p><p><img src="https://github.com/0xomochi/images/blob/master/vscode_powershell.png?raw=true" title="PowerShell VSCode"></p><h2 id="ファンクションキーについて"><a href="#ファンクションキーについて" class="headerlink" title="ファンクションキーについて"></a>ファンクションキーについて</h2><p>・F5: デバッグ実行<br>・F9: ブレークポイントの設定(ブレークポイント解除の際はもう一度F9を押せば良い)<br>・F8: 部分実行  </p><h2 id="PowerShellでWebページのStatusCheckをしてみる"><a href="#PowerShellでWebページのStatusCheckをしてみる" class="headerlink" title="PowerShellでWebページのStatusCheckをしてみる"></a>PowerShellでWebページのStatusCheckをしてみる</h2><p>statusCodeを取得するCmdlet<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$statusCode</span> = (<span class="built_in">Invoke-WebRequest</span> -Uri https://google.com).StatusCode</span><br></pre></td></tr></table></figure></p><p>statusCodeが200であることを確認するCmdlet<br>(200の場合は<code>True</code>を返す)<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$statusCode</span> <span class="nomarkup">-eq</span> <span class="number">200</span></span><br></pre></td></tr></table></figure></p><p>statusCodeが200でないことを確認する<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -eq(equal演算子)を-notで否定する回りくどい書き方</span></span><br><span class="line"><span class="nomarkup">-not</span>(<span class="variable">$statusCode</span> <span class="nomarkup">-eq</span> <span class="number">200</span>)</span><br></pre></td></tr></table></figure></p><h3 id="StatusCheck-ps1-第一形態"><a href="#StatusCheck-ps1-第一形態" class="headerlink" title="StatusCheck.ps1 (第一形態)"></a>StatusCheck.ps1 (第一形態)</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0xomochi</span></span><br><span class="line"><span class="comment"># StatusCheck.ps1</span></span><br><span class="line"><span class="comment"># 1st</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="string">"https://google.com"</span>     <span class="comment"># configure "$url"</span></span><br><span class="line"><span class="comment"># statusCodeを取得する</span></span><br><span class="line"><span class="variable">$statusCode</span> = <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment"># Invoke-WebRequestはstatusCode404ではなく例外を出力するためstatusCodeが200かどうかを確認するときに支障が出る</span></span><br><span class="line">    <span class="comment"># 例外構文を使って例外が出た時も必ずstatusCodeを取得するようにする</span></span><br><span class="line">    (<span class="built_in">Invoke-WebRequest</span> -Uri <span class="variable">$url</span>).StatusCode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="variable">$Error</span>[<span class="number">0</span>].Exception.GetBaseException().Response.StatusCode.Value__</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># statusCodeが200であるかどうかを確認する</span></span><br><span class="line"><span class="comment"># $validStatusCode = 200</span></span><br><span class="line"><span class="variable">$validStatusCode</span> = <span class="number">404</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$statusCode</span> <span class="nomarkup">-ne</span> <span class="variable">$validStatusCode</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ./StatusCheck.logというファイルが存在するかを確認する</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="nomarkup">-not</span>(<span class="built_in">Test-Path</span> ./StatusCheck.log)) &#123;</span><br><span class="line">        <span class="comment"># StatusCheck.logが存在しなければStatusCheck.logファイルを新しく作る</span></span><br><span class="line">        <span class="built_in">New-Item</span> -Path ./StatusCheck.log</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># date, statusCode, urlをjsonで保存</span></span><br><span class="line">    <span class="variable">$json</span> = @&#123;</span><br><span class="line">        Date = <span class="built_in">Get-Date</span></span><br><span class="line">        Url = <span class="variable">$url</span></span><br><span class="line">        StatusCode = <span class="variable">$statusCode</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable">$json</span> | <span class="built_in">ConvertTo-Json</span> -Compress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsonファイルに<code>Out-File</code>Cmdletで書き込みを行う。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$json</span> | <span class="built_in">Out-File</span> -LiteralPath ./StatusCheck.log</span><br></pre></td></tr></table></figure></p><p>この時点での出力結果<code>StatusCheck.log</code>は以下のようになる。<br>何回書き込みをしてもlogが上書きされてしまい、追記されない。<br>形式もjson形式でないので一行で表示されるようにしたい。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name                           Value                                                                                                               </span><br><span class="line">----                           -----                                                                                                               </span><br><span class="line">Url                            https://google.com                                                                                                  </span><br><span class="line">StatusCode                     200                                                                                                                 </span><br><span class="line">Date                           2019/02/18 13:03:13</span><br></pre></td></tr></table></figure></p><p>先ほどと同様にjsonファイルに<code>Out-File</code>Cmdletを使って書き込みを行う。<br><code>-Append</code>は<code>./StatusCheck.log</code>に書き込む度に追記モードにするためのスイッチである。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$json</span> | <span class="built_in">Out-File</span> -LiteralPath ./StatusCheck.log -Append</span><br></pre></td></tr></table></figure></p><p>追記モードに変更した後の出力結果<code>StatusCheck.log</code>は以下のようになる。<br>追記はされたがjson形式でないので見にくい。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Name                           Value                                                                                                               </span><br><span class="line">----                           -----                                                                                                               </span><br><span class="line">Url                            https://google.com                                                                                                  </span><br><span class="line">StatusCode                     200                                                                                                                 </span><br><span class="line">Date                           2019/02/18 13:03:13 </span><br><span class="line"></span><br><span class="line">Name                           Value                                                                                                               </span><br><span class="line">----                           -----                                                                                                               </span><br><span class="line">Url                            https://google.com                                                                                                  </span><br><span class="line">StatusCode                     200                                                                                                                 </span><br><span class="line">Date                           2019/02/18 13:03:13</span><br></pre></td></tr></table></figure></p><h3 id="StatusCheck-ps1を改変する-第二形態"><a href="#StatusCheck-ps1を改変する-第二形態" class="headerlink" title="StatusCheck.ps1を改変する(第二形態)"></a>StatusCheck.ps1を改変する(第二形態)</h3><p>Cmdletでファイル書き込みをしていたところもスクリプトに含め、60secごとに書き込み処理を行うように書き足した。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0xomochi</span></span><br><span class="line"><span class="comment"># StatusCheck.ps1</span></span><br><span class="line"><span class="comment"># 2nd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">$true</span>) &#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="string">"https://google.com"</span></span><br><span class="line">    <span class="variable">$statusCode</span> = <span class="keyword">try</span> &#123;</span><br><span class="line">        (<span class="built_in">Invoke-WebRequest</span> -Uri <span class="variable">$url</span>).StatusCode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="variable">$Error</span>[<span class="number">0</span>].Exception.GetBaseException().Response.StatusCode.value__</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># $validStatusCode = 200</span></span><br><span class="line">    <span class="variable">$validStatusCode</span> = <span class="number">404</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$statusCode</span> <span class="nomarkup">-ne</span> <span class="variable">$validStatusCode</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="nomarkup">-not</span>(<span class="built_in">Test-Path</span> ./StatusCheck.log)) &#123;</span><br><span class="line">            <span class="built_in">New-Item</span> -Path ./StatusCheck.log</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># "@&#123;&#125;"を"[ordered]@&#123;&#125;"とすることで出力が順序を維持した連想配列"OrderedHashTable"となる</span></span><br><span class="line">        <span class="variable">$json</span> = [ordered]@&#123;</span><br><span class="line">            <span class="comment"># 改変前のスクリプトだと"value":"xxxx","DisplayHint":"yyyy"と表示される</span></span><br><span class="line">            <span class="comment"># "Date":"xxxx年y月z日 X曜日 --:--:--"という表記にしたいので(Get-Date).ToString()を使う</span></span><br><span class="line">            Date       = (<span class="built_in">Get-Date</span>).ToString(<span class="string">"F"</span>)</span><br><span class="line">            url        = <span class="variable">$url</span></span><br><span class="line">            StatusCode = <span class="variable">$statusCode</span></span><br><span class="line">        &#125; | <span class="built_in">ConvertTo-Json</span> -Compress</span><br><span class="line">        <span class="variable">$json</span> | <span class="built_in">Out-File</span> -LiteralPath ./StatusCheck.log -Append</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 60sec sleepする</span></span><br><span class="line">    <span class="built_in">Start-Sleep</span> -Seconds <span class="number">60</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>左側の<code>$json</code>の値が<code>$json: {&quot;Date&quot;:&quot;2019年2月20日 水曜日 16:00:54&quot;,&quot;url&quot;:&quot;https://google.com&quot;,&quot;StatusCode&quot;:200}</code>となっている。<br>これでjson形式で<code>StatusCheck.log</code>に出力できるようになった。(赤枠)</p><p><img src="https://github.com/0xomochi/images/blob/master/vscode_json.png?raw=true" title="PowerShell VSCode json"> </p><p>以下のように<code>StatusCheck.ps1</code>を実行する。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS&gt; ./StatusCheck.ps1</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;./StatusCheck.ps1 でも実行できる</span></span><br></pre></td></tr></table></figure></p><p><code>StatusCheck.ps1</code>を実行すると<code>StatusCheck.log</code>に以下のように、60secごとにjson形式でログが追記されているのが確認できる。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;Date&quot;:&quot;2019年2月20日 水曜日 17:55:52&quot;,&quot;url&quot;:&quot;https://google.com&quot;,&quot;StatusCode&quot;:200&#125;</span><br><span class="line">&#123;&quot;Date&quot;:&quot;2019年2月20日 水曜日 17:56:52&quot;,&quot;url&quot;:&quot;https://google.com&quot;,&quot;StatusCode&quot;:200&#125;</span><br><span class="line">&#123;&quot;Date&quot;:&quot;2019年2月20日 水曜日 17:57:52&quot;,&quot;url&quot;:&quot;https://google.com&quot;,&quot;StatusCode&quot;:200&#125;</span><br><span class="line">&#123;&quot;Date&quot;:&quot;2019年2月20日 水曜日 17:58:52&quot;,&quot;url&quot;:&quot;https://google.com&quot;,&quot;StatusCode&quot;:200&#125;</span><br><span class="line">&#123;&quot;Date&quot;:&quot;2019年2月20日 水曜日 17:59:52&quot;,&quot;url&quot;:&quot;https://google.com&quot;,&quot;StatusCode&quot;:200&#125;</span><br><span class="line">&#123;&quot;Date&quot;:&quot;2019年2月20日 水曜日 18:00:53&quot;,&quot;url&quot;:&quot;https://google.com&quot;,&quot;StatusCode&quot;:200&#125;</span><br><span class="line">&#123;&quot;Date&quot;:&quot;2019年2月20日 水曜日 18:01:53&quot;,&quot;url&quot;:&quot;https://google.com&quot;,&quot;StatusCode&quot;:200&#125;</span><br></pre></td></tr></table></figure><h3 id="StatusCheck-ps1完成-最終形態"><a href="#StatusCheck-ps1完成-最終形態" class="headerlink" title="StatusCheck.ps1完成 (最終形態)"></a>StatusCheck.ps1完成 (最終形態)</h3><p>変数をまとめて定義してスクリプトをすっきりさせた。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0xomochi</span></span><br><span class="line"><span class="comment"># StatusCheck.ps1</span></span><br><span class="line"><span class="comment"># 3rd</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="string">"https://google.com"</span></span><br><span class="line"><span class="variable">$validStatusCode</span> = <span class="number">200</span></span><br><span class="line"><span class="variable">$logFile</span> = <span class="string">"./StatusCheck.log"</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">$true</span>) &#123;</span><br><span class="line">    <span class="variable">$statusCode</span> = <span class="keyword">try</span> &#123;</span><br><span class="line">        (<span class="built_in">Invoke-WebRequest</span> -Uri <span class="variable">$url</span>).StatusCode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="variable">$_</span>.Exception.GetBaseException().Response.StatusCode.Value__</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$statusCode</span> <span class="nomarkup">-ne</span> <span class="variable">$validStatusCode</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="nomarkup">-not</span>(<span class="built_in">Test-Path</span> <span class="variable">$logFile</span>)) &#123;</span><br><span class="line">            <span class="built_in">New-Item</span> -Path <span class="variable">$logFile</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$json</span> = [ordered]@&#123;</span><br><span class="line">            Date       = (<span class="built_in">Get-Date</span>).ToString(<span class="string">"F"</span>)</span><br><span class="line">            url        = <span class="variable">$url</span></span><br><span class="line">            StatusCode = <span class="variable">$statusCode</span></span><br><span class="line">        &#125; | <span class="built_in">ConvertTo-Json</span> -Compress</span><br><span class="line"></span><br><span class="line">        <span class="variable">$json</span> | <span class="built_in">Out-File</span> -LiteralPath <span class="variable">$logFile</span> -Append</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Start-Sleep</span> -Seconds <span class="number">60</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(to be updated)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PowerShellのインストール-for-mac&quot;&gt;&lt;a href=&quot;#PowerShellのインストール-for-mac&quot; class=&quot;headerlink&quot; title=&quot;PowerShellのインストール(for mac)&quot;&gt;&lt;/a&gt;PowerShell
      
    
    </summary>
    
      <category term="PowerShell" scheme="http://0xomochi.github.io/categories/PowerShell/"/>
    
      <category term="beginner" scheme="http://0xomochi.github.io/categories/PowerShell/beginner/"/>
    
    
      <category term="PowerShell" scheme="http://0xomochi.github.io/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>References</title>
    <link href="http://0xomochi.github.io/2018/09/08/References/"/>
    <id>http://0xomochi.github.io/2018/09/08/References/</id>
    <published>2018-09-08T14:19:45.000Z</published>
    <updated>2019-01-22T13:09:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>(To be updated)</p><h2 id="Analysis-Report"><a href="#Analysis-Report" class="headerlink" title="Analysis Report"></a>Analysis Report</h2><p>・<a href="http://www.malware-traffic-analysis.net/" target="_blank" rel="noopener">Malware Traffic Analysis.net</a><br>・<a href="http://blog.netlab.360.com/" target="_blank" rel="noopener">Network Security Research Lab at 360</a><br>・<a href="https://blog.ensilo.com/" target="_blank" rel="noopener">ENSILO BLOG</a><br>・<a href="https://www.lastline.com/labs/blog/" target="_blank" rel="noopener">Lastline Labs Blog</a><br>・<a href="http://www.broadanalysis.com/" target="_blank" rel="noopener">BROADANALYSIS</a><br>・<a href="https://malwarebreakdown.com/" target="_blank" rel="noopener">Malware Breakdown</a><br>・<a href="https://zerophagemalware.com/" target="_blank" rel="noopener">Zerophage Malware</a><br>・<a href="https://blogs.yahoo.co.jp/fireflyframer" target="_blank" rel="noopener">無題な濃いログ</a>  </p><h2 id="Get-malware"><a href="#Get-malware" class="headerlink" title="Get malware"></a>Get malware</h2><p>You can download live malware from sites below.<br>Please download at your own risk.<br>・<a href="https://www.hybrid-analysis.com/" target="_blank" rel="noopener">Hybrid Analysis</a><br>・<a href="http://vxvault.net/ViriList.php" target="_blank" rel="noopener">VXVault</a><br>・<a href="http://www.malware-traffic-analysis.net/" target="_blank" rel="noopener">Malware Traffic Analysis</a><br>・<a href="https://app.any.run/" target="_blank" rel="noopener">any.run</a><br>・<a href="https://malshare.com/" target="_blank" rel="noopener">MalShare</a><br>・<a href="http://contagiodump.blogspot.com/" target="_blank" rel="noopener">contagio</a>  </p><h2 id="Get-tools"><a href="#Get-tools" class="headerlink" title="Get tools"></a>Get tools</h2><p>・<a href="https://github.com/0xomochi/tools/tree/master/packer" target="_blank" rel="noopener">GitHub @0xomochi tools/packer</a><br>・<a href="https://github.com/0xomochi/tools/tree/master/packer_detector" target="_blank" rel="noopener">GitHub @0xomochi tools/packer_detector</a></p><h2 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h2><p>These accounts are useful for collecting information about malware and variours vulnerabilities.<br>・<a href="https://twitter.com/piyokango" target="_blank" rel="noopener">@piyokango</a><br>・<a href="https://twitter.com/HybridAnalysis" target="_blank" rel="noopener">@HybridAnalysis</a><br>・<a href="https://twitter.com/you0708" target="_blank" rel="noopener">@you0708</a><br>・<a href="https://twitter.com/nao_sec" target="_blank" rel="noopener">@nao_sec</a><br>・<a href="https://twitter.com/01ra66it" target="_blank" rel="noopener">@01ra66it</a><br>・<a href="https://twitter.com/anyrun_app" target="_blank" rel="noopener">@anyrun_app</a><br>・<a href="https://twitter.com/VK_Intel" target="_blank" rel="noopener">@VK_Intel</a><br>・<a href="https://twitter.com/WDSecurity" target="_blank" rel="noopener">@WDSecurity</a><br>・<a href="https://twitter.com/malwrhunterteam" target="_blank" rel="noopener">@malwrhunterteam</a>  </p><h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><p>Most are written in Jaqpanese, sorry.<br>・<a href="">アナライジングマルウェア</a><br>・<a href="">サイバーセキュリティプログラミング</a>  </p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>Good references to understand the overall picture of malware analysis.<br>・<a href="https://hackmd.io/s/S1kLEr5x" target="_blank" rel="noopener">マルウェア解析に必要な素養</a>  </p><p>About initial response when your pc was infected.<br>・<a href="https://www.slideshare.net/IIJ_PR/ss-121246301" target="_blank" rel="noopener">マルウェア感染！！そのときあなたがやるべきこと、やってはいけないこと</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(To be updated)&lt;/p&gt;
&lt;h2 id=&quot;Analysis-Report&quot;&gt;&lt;a href=&quot;#Analysis-Report&quot; class=&quot;headerlink&quot; title=&quot;Analysis Report&quot;&gt;&lt;/a&gt;Analysis Report&lt;/h
      
    
    </summary>
    
      <category term="references" scheme="http://0xomochi.github.io/categories/references/"/>
    
    
      <category term="references" scheme="http://0xomochi.github.io/tags/references/"/>
    
  </entry>
  
  <entry>
    <title>wireshark memo</title>
    <link href="http://0xomochi.github.io/2018/09/08/wireshark-memo/"/>
    <id>http://0xomochi.github.io/2018/09/08/wireshark-memo/</id>
    <published>2018-09-08T14:01:44.000Z</published>
    <updated>2019-02-18T08:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tshark"><a href="#tshark" class="headerlink" title="tshark"></a>tshark</h1><p>GUI likeなwiresharkのCLIバージョン<br>tsharkのインストール方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install wireshark</span><br><span class="line">$ tshark -v</span><br></pre></td></tr></table></figure></p><h3 id="tsharkのオプション一覧"><a href="#tsharkのオプション一覧" class="headerlink" title="tsharkのオプション一覧"></a>tsharkのオプション一覧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">Usage: tshark [options] ...</span><br><span class="line"></span><br><span class="line">Capture interface:</span><br><span class="line">  -i &lt;interface&gt;           name or idx of interface (def: first non-loopback)</span><br><span class="line">  -f &lt;capture filter&gt;      packet filter in libpcap filter syntax</span><br><span class="line">  -s &lt;snaplen&gt;             packet snapshot length (def: appropriate maximum)</span><br><span class="line">  -p                       don&apos;t capture in promiscuous mode</span><br><span class="line">  -I                       capture in monitor mode, if available</span><br><span class="line">  -B &lt;buffer size&gt;         size of kernel buffer (def: 2MB)</span><br><span class="line">  -y &lt;link type&gt;           link layer type (def: first appropriate)</span><br><span class="line">  --time-stamp-type &lt;type&gt; timestamp method for interface</span><br><span class="line">  -D                       print list of interfaces and exit</span><br><span class="line">  -L                       print list of link-layer types of iface and exit</span><br><span class="line">  --list-time-stamp-types  print list of timestamp types for iface and exit</span><br><span class="line"></span><br><span class="line">Capture stop conditions:</span><br><span class="line">  -c &lt;packet count&gt;        stop after n packets (def: infinite)</span><br><span class="line">  -a &lt;autostop cond.&gt; ...  duration:NUM - stop after NUM seconds</span><br><span class="line">                           filesize:NUM - stop this file after NUM KB</span><br><span class="line">                              files:NUM - stop after NUM files</span><br><span class="line">Capture output:</span><br><span class="line">  -b &lt;ringbuffer opt.&gt; ... duration:NUM - switch to next file after NUM secs</span><br><span class="line">                           interval:NUM - create time intervals of NUM secs</span><br><span class="line">                           filesize:NUM - switch to next file after NUM KB</span><br><span class="line">                              files:NUM - ringbuffer: replace after NUM files</span><br><span class="line">Input file:</span><br><span class="line">  -r &lt;infile&gt;              set the filename to read from (- to read from stdin)</span><br><span class="line"></span><br><span class="line">Processing:</span><br><span class="line">  -2                       perform a two-pass analysis</span><br><span class="line">  -M &lt;packet count&gt;        perform session auto reset</span><br><span class="line">  -R &lt;read filter&gt;         packet Read filter in Wireshark display filter syntax</span><br><span class="line">                           (requires -2)</span><br><span class="line">  -Y &lt;display filter&gt;      packet displaY filter in Wireshark display filter</span><br><span class="line">                           syntax</span><br><span class="line">  -n                       disable all name resolutions (def: all enabled)</span><br><span class="line">  -N &lt;name resolve flags&gt;  enable specific name resolution(s): &quot;mnNtCd&quot;</span><br><span class="line">  -d &lt;layer_type&gt;==&lt;selector&gt;,&lt;decode_as_protocol&gt; ...</span><br><span class="line">                           &quot;Decode As&quot;, see the man page for details</span><br><span class="line">                           Example: tcp.port==8888,http</span><br><span class="line">  -H &lt;hosts file&gt;          read a list of entries from a hosts file, which will</span><br><span class="line">                           then be written to a capture file. (Implies -W n)</span><br><span class="line">  --enable-protocol &lt;proto_name&gt;</span><br><span class="line">                           enable dissection of proto_name</span><br><span class="line">  --disable-protocol &lt;proto_name&gt;</span><br><span class="line">                           disable dissection of proto_name</span><br><span class="line">  --enable-heuristic &lt;short_name&gt;</span><br><span class="line">                           enable dissection of heuristic protocol</span><br><span class="line">  --disable-heuristic &lt;short_name&gt;</span><br><span class="line">                           disable dissection of heuristic protocol</span><br><span class="line">Output:</span><br><span class="line">  -w &lt;outfile|-&gt;           write packets to a pcap-format file named &quot;outfile&quot;</span><br><span class="line">                           (or to the standard output for &quot;-&quot;)</span><br><span class="line">  -C &lt;config profile&gt;      start with specified configuration profile</span><br><span class="line">  -F &lt;output file type&gt;    set the output file type, default is pcapng</span><br><span class="line">                           an empty &quot;-F&quot; option will list the file types</span><br><span class="line">  -V                       add output of packet tree        (Packet Details)</span><br><span class="line">  -O &lt;protocols&gt;           Only show packet details of these protocols, comma</span><br><span class="line">                           separated</span><br><span class="line">  -P                       print packet summary even when writing to a file</span><br><span class="line">  -S &lt;separator&gt;           the line separator to print between packets</span><br><span class="line">  -x                       add output of hex and ASCII dump (Packet Bytes)</span><br><span class="line">  -T pdml|ps|psml|json|jsonraw|ek|tabs|text|fields|?</span><br><span class="line">                           format of text output (def: text)</span><br><span class="line">  -j &lt;protocolfilter&gt;      protocols layers filter if -T ek|pdml|json selected</span><br><span class="line">                           (e.g. &quot;ip ip.flags text&quot;, filter does not expand child</span><br><span class="line">                           nodes, unless child is specified also in the filter)</span><br><span class="line">  -J &lt;protocolfilter&gt;      top level protocol filter if -T ek|pdml|json selected</span><br><span class="line">                           (e.g. &quot;http tcp&quot;, filter which expands all child nodes)</span><br><span class="line">  -e &lt;field&gt;               field to print if -Tfields selected (e.g. tcp.port,</span><br><span class="line">                           _ws.col.Info)</span><br><span class="line">                           this option can be repeated to print multiple fields</span><br><span class="line">  -E&lt;fieldsoption&gt;=&lt;value&gt; set options for output when -Tfields selected:</span><br><span class="line">     bom=y|n               print a UTF-8 BOM</span><br><span class="line">     header=y|n            switch headers on and off</span><br><span class="line">     separator=/t|/s|&lt;char&gt; select tab, space, printable character as separator</span><br><span class="line">     occurrence=f|l|a      print first, last or all occurrences of each field</span><br><span class="line">     aggregator=,|/s|&lt;char&gt; select comma, space, printable character as</span><br><span class="line">                           aggregator</span><br><span class="line">     quote=d|s|n           select double, single, no quotes for values</span><br><span class="line">  -t a|ad|d|dd|e|r|u|ud|?  output format of time stamps (def: r: rel. to first)</span><br><span class="line">  -u s|hms                 output format of seconds (def: s: seconds)</span><br><span class="line">  -l                       flush standard output after each packet</span><br><span class="line">  -q                       be more quiet on stdout (e.g. when using statistics)</span><br><span class="line">  -Q                       only log true errors to stderr (quieter than -q)</span><br><span class="line">  -g                       enable group read access on the output file(s)</span><br><span class="line">  -W n                     Save extra information in the file, if supported.</span><br><span class="line">                           n = write network address resolution information</span><br><span class="line">  -X &lt;key&gt;:&lt;value&gt;         eXtension options, see the man page for details</span><br><span class="line">  -U tap_name              PDUs export mode, see the man page for details</span><br><span class="line">  -z &lt;statistics&gt;          various statistics, see the man page for details</span><br><span class="line">  --capture-comment &lt;comment&gt;</span><br><span class="line">                           add a capture comment to the newly created</span><br><span class="line">                           output file (only for pcapng)</span><br><span class="line">  --export-objects &lt;protocol&gt;,&lt;destdir&gt; save exported objects for a protocol to</span><br><span class="line">                           a directory named &quot;destdir&quot;</span><br><span class="line">  --color                  color output text similarly to the Wireshark GUI,</span><br><span class="line">                           requires a terminal with 24-bit color support</span><br><span class="line">                           Also supplies color attributes to pdml and psml formats</span><br><span class="line">                           (Note that attributes are nonstandard)</span><br><span class="line">  --no-duplicate-keys      If -T json is specified, merge duplicate keys in an object</span><br><span class="line">                           into a single key with as value a json array containing all</span><br><span class="line">                           values</span><br><span class="line">Miscellaneous:</span><br><span class="line">  -h                       display this help and exit</span><br><span class="line">  -v                       display version info and exit</span><br><span class="line">  -o &lt;name&gt;:&lt;value&gt; ...    override preference setting</span><br><span class="line">  -K &lt;keytab&gt;              keytab file to use for kerberos decryption</span><br><span class="line">  -G [report]              dump one of several available reports and exit</span><br><span class="line">                           default report=&quot;fields&quot;</span><br><span class="line">                           use &quot;-G help&quot; for more help</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tshark&quot;&gt;&lt;a href=&quot;#tshark&quot; class=&quot;headerlink&quot; title=&quot;tshark&quot;&gt;&lt;/a&gt;tshark&lt;/h1&gt;&lt;p&gt;GUI likeなwiresharkのCLIバージョン&lt;br&gt;tsharkのインストール方法&lt;br&gt;&lt;fig
      
    
    </summary>
    
      <category term="tool" scheme="http://0xomochi.github.io/categories/tool/"/>
    
      <category term="wireshark" scheme="http://0xomochi.github.io/categories/tool/wireshark/"/>
    
    
      <category term="wireshark" scheme="http://0xomochi.github.io/tags/wireshark/"/>
    
      <category term="packet" scheme="http://0xomochi.github.io/tags/packet/"/>
    
  </entry>
  
  <entry>
    <title>hexo blogをデプロイするまで</title>
    <link href="http://0xomochi.github.io/2018/09/07/hexo-blog%E3%82%92%E3%83%86%E3%82%99%E3%83%95%E3%82%9A%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A6%E3%82%99/"/>
    <id>http://0xomochi.github.io/2018/09/07/hexo-blogをデプロイするまで/</id>
    <published>2018-09-07T01:49:46.000Z</published>
    <updated>2019-02-18T08:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="モチベーション"><a href="#モチベーション" class="headerlink" title="モチベーション"></a>モチベーション</h2><p>・<a href="https://qiita.com/okmttdhr/items/82ecb0332835472e905f#hexojavascriptgithub-star-4204" target="_blank" rel="noopener">静的サイトジェネレーター</a>でブログを作りたい<br>・ブログ構築しつつGitHubで差分管理しておきたい -&gt; <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>  </p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>MacOS High Sierra 10.13.6<br>homebrewインストール済み(<a href="https://brew.sh/index_ja" target="_blank" rel="noopener">homebrewのインストールについて</a>)  </p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>かなり雑に書いているので参考サイト参照  </p><h3 id="Github-Pages用のリポジトリを作る"><a href="#Github-Pages用のリポジトリを作る" class="headerlink" title="Github Pages用のリポジトリを作る"></a>Github Pages用のリポジトリを作る</h3><p>自分のGitHubにアクセスし、新しいリポジトリを作成<br>リポジトリ名は”&lt;replace_username&gt;.github.io”にする<br>ブログのurlが”https://&lt;replace_username&gt;.github.io”になる  </p><h3 id="Homebrewでnodebrewをインストール"><a href="#Homebrewでnodebrewをインストール" class="headerlink" title="Homebrewでnodebrewをインストール"></a>Homebrewでnodebrewをインストール</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node brew</span><br></pre></td></tr></table></figure><p>.bash_profileに追記して.bash_profileを再読み込み<br>pathの指定でミスってvimなどの主要コマンドが使えなくなった場合<br>-&gt; <a href="https://yunabe.hatenablog.com/entry/2017/02/11/134355" target="_blank" rel="noopener">対処</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>node.js(最新版)をインストールする<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ nodebrew install-binary latest</span><br><span class="line">Fetching: https://nodejs.org/dist/v10.10.0/node-v10.10.0-darwin-x64.tar.gz</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">Installed successfully</span><br><span class="line"></span><br><span class="line">$ nodebrew list</span><br><span class="line">v10.10.0</span><br><span class="line"></span><br><span class="line">current: none</span><br><span class="line"></span><br><span class="line">$ nodebrew use v10.10.0</span><br><span class="line">$ nodebrew list</span><br><span class="line">v10.10.0</span><br><span class="line"></span><br><span class="line">current: v10.10.0</span><br><span class="line"></span><br><span class="line">$ npm -v</span><br><span class="line">6.2.0</span><br></pre></td></tr></table></figure></p><p><code>$ nodebrew install-binary latest</code>がうまくいかなかった時は<br>-&gt; <a href="https://qiita.com/yn01/items/d1fa10dbe4850f7cd693" target="_blank" rel="noopener">対処法</a><br>これでもうまくいかない場合は上記コマンドにsudoをつけて実行  </p><h3 id="hexoとデプロイツールを導入"><a href="#hexoとデプロイツールを導入" class="headerlink" title="hexoとデプロイツールを導入"></a>hexoとデプロイツールを導入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir myblog</span><br><span class="line">$ <span class="built_in">cd</span> myblog</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>これで<code>localhost:4000</code>でデプロイしたページが見れる<br><code>ctr+C</code>で終了  </p><h3 id="config-ymlの修正"><a href="#config-ymlの修正" class="headerlink" title="_config.ymlの修正"></a>_config.ymlの修正</h3><p>themeによって変化するので割愛<br><a href="https://qiita.com/wawawa/items/1a2f174fb29c35302543" target="_blank" rel="noopener">参考</a>  </p><h3 id="好みのThemeを探す"><a href="#好みのThemeを探す" class="headerlink" title="好みのThemeを探す"></a>好みのThemeを探す</h3><p>・<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo themes 公式</a><br>・<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">hexo themes wiki</a><br>・本ブログで使っているtheme -&gt; <a href="https://github.com/sabrinaluo/hexo-theme-replica" target="_blank" rel="noopener">sabrinaluo/hexo-theme-replica</a>  </p><h3 id="デプロイする"><a href="#デプロイする" class="headerlink" title="デプロイする"></a>デプロイする</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote add origin git@github.com:&lt;replace_username&gt;/&lt;replace_username&gt;.github.io.git</span><br><span class="line">$ hexo deploy -g</span><br></pre></td></tr></table></figure><p>これで<code>https://&lt;replace_username&gt;.github.io</code>にアクセスしてブログが見れればdone<br>新しい記事を作る手順は本ブログの<a href="https://0xomochi.github.io/2018/09/07/hello-world/">Hello World</a>にある  </p><h3 id="postの削除方法"><a href="#postの削除方法" class="headerlink" title="postの削除方法"></a>postの削除方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm &lt;your_dir&gt;/<span class="built_in">source</span>/_posts/&lt;your_post.md&gt;</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="categoriesとtagsの404解消"><a href="#categoriesとtagsの404解消" class="headerlink" title="categoriesとtagsの404解消"></a>categoriesとtagsの404解消</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><h2 id="参考にしたサイト"><a href="#参考にしたサイト" class="headerlink" title="参考にしたサイト"></a>参考にしたサイト</h2><p><a href="https://qiita.com/in_silico_/items/7e6ed639c24142bdbd04" target="_blank" rel="noopener">Hexoで始めるお手軽な静的ブログ　-インストールと配備-</a><br><a href="https://tech.qookie.jp/posts/hexo-deploy-github-pages-fast/" target="_blank" rel="noopener">HexoブログをGitHub Pagesで最速公開する</a><br><a href="https://qiita.com/f_prg/items/d10a77b1e356a46d9ab9" target="_blank" rel="noopener">Hexoでgithubにデプロイする</a><br><a href="https://qiita.com/jhChoi/items/85f3b5ba39619bc47f4d" target="_blank" rel="noopener">【Hexo入門】Hexoでブログを作成する時のTipsまとめ</a><br><a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">Troubleshooting</a><br><a href="https://qiita.com/wawawa/items/1a2f174fb29c35302543" target="_blank" rel="noopener">Hexoを使って個人ブログ作成, Github Pagesにデプロイするまで</a><br><a href="https://tech.qookie.jp/posts/hexo-frontmatter-category-tag/" target="_blank" rel="noopener">HexoのFront-matterにカテゴリーとタグを上手く設定する方法</a><br><a href="https://teratail.com/questions/24309" target="_blank" rel="noopener">nodebrew ls でエラーになります。</a><br><a href="https://qiita.com/suisuina/items/c5c4e4b9f55a8615a542" target="_blank" rel="noopener">nodebrewでよく使うコマンド</a><br><a href="http://zaki3.hateblo.jp/entry/2018/03/21/111738" target="_blank" rel="noopener">おれろぐ #z_a_ki3/node.jsの環境構築（mac）</a><br><a href="http://sabrinaluo.github.io/tech/" target="_blank" rel="noopener">小白妹妹写代码</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;モチベーション&quot;&gt;&lt;a href=&quot;#モチベーション&quot; class=&quot;headerlink&quot; title=&quot;モチベーション&quot;&gt;&lt;/a&gt;モチベーション&lt;/h2&gt;&lt;p&gt;・&lt;a href=&quot;https://qiita.com/okmttdhr/items/82ecb03
      
    
    </summary>
    
      <category term="hexo" scheme="http://0xomochi.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://0xomochi.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="http://0xomochi.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>whoami</title>
    <link href="http://0xomochi.github.io/2018/09/07/whoami/"/>
    <id>http://0xomochi.github.io/2018/09/07/whoami/</id>
    <published>2018-09-07T01:47:14.000Z</published>
    <updated>2019-07-09T17:46:03.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hi-I’m-omochi"><a href="#Hi-I’m-omochi" class="headerlink" title="Hi, I’m omochi!"></a>Hi, I’m omochi!</h1><ul><li><a href="https://www.sfc.keio.ac.jp/en/" target="_blank" rel="noopener">Keio Univ. SFC</a>/<a href="https://rg.sfc.keio.ac.jp/" target="_blank" rel="noopener"> Murai Lab.</a>/<a href="https://sigma.fdsa.jp/" target="_blank" rel="noopener"> Sigma</a></li><li><a href="https://www.ipa.go.jp/icscoe/campaign1.html" target="_blank" rel="noopener">IPA ICSCoE</a> Instructor Assistant (独立行政法人 情報推進機構 産業サイバーセキュリティセンター 講師補助員)</li><li><a href="http://www.urasenke.or.jp/textb/culic/index.html" target="_blank" rel="noopener">裏千家茶道上級(助講師)</a></li></ul><h2 id="Works"><a href="#Works" class="headerlink" title="Works"></a>Works</h2><ul><li>Verification of Anti Virus Software<ul><li><a href="https://www.deepinstinct.com/" target="_blank" rel="noopener">DeepInstinct</a>の<a href="https://www.asgent.co.jp/press/releases/2017/20170913-001151.html" target="_blank" rel="noopener">リリース前検証</a> </li><li><a href="https://www.deepinstinct.com/" target="_blank" rel="noopener">DeepInstinct(リリースver)</a>と他製品の比較検証</li></ul></li></ul><h2 id="Interests-Likes"><a href="#Interests-Likes" class="headerlink" title="Interests/Likes"></a>Interests/Likes</h2><p>just a beginner……</p><ul><li>malware analysis</li><li>malware packer</li><li>obfuscation</li><li>reverse engineering</li><li>IDA</li><li>radare2</li><li>Volatility Framework</li></ul><h2 id="Lang"><a href="#Lang" class="headerlink" title="Lang"></a>Lang</h2><ul><li>C</li><li>Python</li><li>C++</li><li>Shell script</li><li>JavaScript</li><li>Java(△)</li><li>Haskell(△)</li></ul><h2 id="EVENTS"><a href="#EVENTS" class="headerlink" title="EVENTS"></a>EVENTS</h2><h3 id="Security-Camp"><a href="#Security-Camp" class="headerlink" title="Security Camp"></a>Security Camp</h3><ul><li><a href="https://www.ipa.go.jp/jinzai/camp/2017/zenkoku2017.html" target="_blank" rel="noopener">セキュリティ・キャンプ全国大会 2017</a> 選択コース 参加者  </li><li><a href="https://www.ipa.go.jp/jinzai/camp/2018/zenkoku2018_index.html" target="_blank" rel="noopener">セキュリティ・キャンプ全国大会 2018</a> 集中コース Zトラック「アンチウィルス実装トラック」チューター  </li><li><a href="https://www.ipa.go.jp/jinzai/camp/2019/zenkoku2019_index.html" target="_blank" rel="noopener">セキュリティ・キャンプ全国大会 2019</a>選択コース Aトラック「脆弱性・マルウェア解析トラック」チューター</li></ul><h3 id="CODEBLUE"><a href="#CODEBLUE" class="headerlink" title="CODEBLUE"></a>CODEBLUE</h3><ul><li><a href="https://codeblue.jp/2017/" target="_blank" rel="noopener">CODEBLUE 2017</a> Student staff  </li><li><a href="https://codeblue.jp/2018/" target="_blank" rel="noopener">CODEBLUE 2018</a> Student staff(speaker attend)  </li></ul><h3 id="AVTOKYO"><a href="#AVTOKYO" class="headerlink" title="AVTOKYO"></a>AVTOKYO</h3><ul><li><a href="http://ja.avtokyo.org/avtokyo2017" target="_blank" rel="noopener">AVTOKYO 2017</a></li><li><a href="http://ja.avtokyo.org/avtokyo2018" target="_blank" rel="noopener">AVTOKYO 2018</a></li></ul><h3 id="CSS-Computer-Security-Symposium"><a href="#CSS-Computer-Security-Symposium" class="headerlink" title="CSS(Computer Security Symposium)"></a>CSS(Computer Security Symposium)</h3><ul><li><a href="https://www.iwsec.org/css/2018/" target="_blank" rel="noopener">CSS 2018</a><a href="https://www.iwsec.org/css/2018/demo.html" target="_blank" rel="noopener"> Poster session</a><ul><li>Title: VirusTotalを用いたパック処理済みマルウェアの検知率調査及びアンチウイルスソフトの評価</li></ul></li></ul><h3 id="MWSCup"><a href="#MWSCup" class="headerlink" title="MWSCup"></a>MWSCup</h3><ul><li><a href="https://www.iwsec.org/mws/2018/" target="_blank" rel="noopener">MWSCup 2018</a> (Seccap-KKK)</li></ul><p><br></p><h2 id="Anyone-who-want-to-support-omochi-please-click-my-wish-list"><a href="#Anyone-who-want-to-support-omochi-please-click-my-wish-list" class="headerlink" title="Anyone who want to support omochi, please click my wish list!"></a>Anyone who want to support omochi, please click my wish list!</h2><p><a href="http://amzn.asia/6G2WJv9" target="_blank" rel="noopener">omochi’s amazon wish list</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hi-I’m-omochi&quot;&gt;&lt;a href=&quot;#Hi-I’m-omochi&quot; class=&quot;headerlink&quot; title=&quot;Hi, I’m omochi!&quot;&gt;&lt;/a&gt;Hi, I’m omochi!&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="bio" scheme="http://0xomochi.github.io/categories/bio/"/>
    
    
      <category term="whoami" scheme="http://0xomochi.github.io/tags/whoami/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://0xomochi.github.io/2018/09/07/hello-world/"/>
    <id>http://0xomochi.github.io/2018/09/07/hello-world/</id>
    <published>2018-09-06T16:32:25.000Z</published>
    <updated>2018-09-06T16:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
